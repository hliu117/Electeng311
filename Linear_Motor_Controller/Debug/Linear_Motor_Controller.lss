
Linear_Motor_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080011e  0080011e  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000baa  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000951  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000599  00000000  00000000  000018af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  9e:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialise_uart>:
//Determining if the transmission has been received 
#define receive_complete (UCSR0A & (1<<RXC0))

void initialise_uart(uint16_t UBRR_VALUE){
	//Setting the UBRR value
	UBRR0L = UBRR_VALUE;
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (UBRR_VALUE>>8);
  aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	//Setting the Transmitter and Receiver Enable Bits
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	80 83       	st	Z, r24

	//Enable UART receive interrupt
	UCSR0B = (1<RXCIE0);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24

	//Setting the Character size to 8 bits
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c0:	08 95       	ret

000000c2 <uart_transmit>:
}

void uart_transmit(char character){
	//Check if the transfer buffer is empty 
	while(UDR_FULL);
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	95 ff       	sbrs	r25, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <uart_transmit+0x4>
	//Transfer the character to the transfer buffer
	UDR0 = character;
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d0:	08 95       	ret

000000d2 <transmit_message>:
}

void transmit_message(char* message){
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	//Determine the length of the message
	uint16_t message_length = strlen(message);
  da:	fc 01       	movw	r30, r24
  dc:	01 90       	ld	r0, Z+
  de:	00 20       	and	r0, r0
  e0:	e9 f7       	brne	.-6      	; 0xdc <transmit_message+0xa>
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	e8 1b       	sub	r30, r24
  e6:	f9 0b       	sbc	r31, r25
	
	//Transmit each separate character of the message
	for(uint16_t i = 0; i < message_length; i++){
  e8:	51 f0       	breq	.+20     	; 0xfe <transmit_message+0x2c>
  ea:	ec 01       	movw	r28, r24
  ec:	8c 01       	movw	r16, r24
  ee:	0e 0f       	add	r16, r30
  f0:	1f 1f       	adc	r17, r31
		uart_transmit(message[i]);
  f2:	89 91       	ld	r24, Y+
  f4:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_transmit>
void transmit_message(char* message){
	//Determine the length of the message
	uint16_t message_length = strlen(message);
	
	//Transmit each separate character of the message
	for(uint16_t i = 0; i < message_length; i++){
  f8:	c0 17       	cp	r28, r16
  fa:	d1 07       	cpc	r29, r17
  fc:	d1 f7       	brne	.-12     	; 0xf2 <transmit_message+0x20>
		uart_transmit(message[i]);
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <uart_flush>:

//Clean out the contents of the receive buffer
void uart_flush(){
	UCSR0B &= ~(1<<RXEN0);
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 7e       	andi	r24, 0xEF	; 239
 110:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0);
 112:	80 81       	ld	r24, Z
 114:	80 61       	ori	r24, 0x10	; 16
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <uart_receive>:
}

unsigned char uart_receive(){
	uart_flush();
 11a:	0e 94 84 00 	call	0x108	; 0x108 <uart_flush>
	while(!receive_complete);
 11e:	e0 ec       	ldi	r30, 0xC0	; 192
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <uart_receive+0x8>
	return UDR0;
 128:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 12c:	08 95       	ret

0000012e <receive_message>:
// 		strcat(received_message,store);
// 	}
// }

#define MAX_LENGTH 20
char* receive_message(){
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ce e1       	ldi	r28, 0x1E	; 30
 138:	d1 e0       	ldi	r29, 0x01	; 1
 13a:	02 e3       	ldi	r16, 0x32	; 50
 13c:	11 e0       	ldi	r17, 0x01	; 1
	static char received_message[MAX_LENGTH];
	unsigned char end_character = '}'; //Assign desired end character
	unsigned char received_character;
	uint16_t i = 0; //Used to loop through string
	while(i<MAX_LENGTH){
		received_character = uart_receive(); //Get the new character we've received
 13e:	0e 94 8d 00 	call	0x11a	; 0x11a <uart_receive>
		if (received_character == end_character) { //If its the end of the string, exit the loop
 142:	8d 37       	cpi	r24, 0x7D	; 125
 144:	29 f0       	breq	.+10     	; 0x150 <receive_message+0x22>
			i = MAX_LENGTH;
		}
		received_message[i] = received_character; //Store the character in the string
 146:	89 93       	st	Y+, r24
char* receive_message(){
	static char received_message[MAX_LENGTH];
	unsigned char end_character = '}'; //Assign desired end character
	unsigned char received_character;
	uint16_t i = 0; //Used to loop through string
	while(i<MAX_LENGTH){
 148:	c0 17       	cp	r28, r16
 14a:	d1 07       	cpc	r29, r17
 14c:	c1 f7       	brne	.-16     	; 0x13e <receive_message+0x10>
 14e:	03 c0       	rjmp	.+6      	; 0x156 <receive_message+0x28>
		received_character = uart_receive(); //Get the new character we've received
		if (received_character == end_character) { //If its the end of the string, exit the loop
			i = MAX_LENGTH;
		}
		received_message[i] = received_character; //Store the character in the string
 150:	8d e7       	ldi	r24, 0x7D	; 125
 152:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <msg>
		i++;
	}
	return received_message; //Return the pointer
}
 156:	8e e1       	ldi	r24, 0x1E	; 30
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <__vector_18>:
#define BAUD_RATE 9600
#define UBRR_VALUE F_CPU/16/BAUD_RATE-1
	
volatile unsigned char msg[20];

ISR(USART_RX_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
	unsigned char temp;
	temp = UDR0;
 170:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	msg[0] = temp; //Temporary uart receive interrupt, not complete
 174:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <msg>
}
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <main>:

int main(void)
{	
	initialise_uart(UBRR_VALUE);
 184:	87 e6       	ldi	r24, 0x67	; 103
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <initialise_uart>
	sei(); //Enabling global interrupts 
 18c:	78 94       	sei
	
	transmit_message("Hello we are Team 1!\n\r");
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 69 00 	call	0xd2	; 0xd2 <transmit_message>
	char* received_message = "";
    while (1) 
    {
		flash_led();
 196:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <flash_led>
		transmit_message("new\n\r");
 19a:	87 e1       	ldi	r24, 0x17	; 23
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 69 00 	call	0xd2	; 0xd2 <transmit_message>
		receive_message(received_message);
 1a2:	86 e1       	ldi	r24, 0x16	; 22
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 97 00 	call	0x12e	; 0x12e <receive_message>
		transmit_message(received_message);
 1aa:	86 e1       	ldi	r24, 0x16	; 22
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 69 00 	call	0xd2	; 0xd2 <transmit_message>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	89 e6       	ldi	r24, 0x69	; 105
 1b6:	98 e1       	ldi	r25, 0x18	; 24
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x34>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x3e>
 1c2:	00 00       	nop
 1c4:	e8 cf       	rjmp	.-48     	; 0x196 <main+0x12>

000001c6 <flash_led>:
 *  Author: Team 1
 */ 
#include "includes.h"

void flash_led(){
	DDRB = 0b00100000;
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00100000;
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	89 e6       	ldi	r24, 0x69	; 105
 1d0:	98 e1       	ldi	r25, 0x18	; 24
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <flash_led+0xc>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <flash_led+0x16>
 1dc:	00 00       	nop
	_delay_ms(500);
	PORTB = 0b00000000;
 1de:	15 b8       	out	0x05, r1	; 5
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	89 e6       	ldi	r24, 0x69	; 105
 1e4:	98 e1       	ldi	r25, 0x18	; 24
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <flash_led+0x20>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <flash_led+0x2a>
 1f0:	00 00       	nop
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
